<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [STM32F401xx\STM32F401xx.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image STM32F401xx\STM32F401xx.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060422: Last Updated: Sat Mar 02 22:03:29 2019
<BR><P>
<H3>Maximum Stack Usage =        800 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
Task_usart2_RX &rArr; banner_message &rArr; send &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1c]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">ADC_IRQHandler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1c]">ADC_IRQHandler</a> from startup_stm32f413_423xx.o(.text) referenced from startup_stm32f413_423xx.o(RESET)
 <LI><a href="#[58]">AES_IRQHandler</a> from startup_stm32f413_423xx.o(.text) referenced from startup_stm32f413_423xx.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from stm32f4xx_it.o(i.BusFault_Handler) referenced from startup_stm32f413_423xx.o(RESET)
 <LI><a href="#[1e]">CAN1_RX0_IRQHandler</a> from startup_stm32f413_423xx.o(.text) referenced from startup_stm32f413_423xx.o(RESET)
 <LI><a href="#[1f]">CAN1_RX1_IRQHandler</a> from startup_stm32f413_423xx.o(.text) referenced from startup_stm32f413_423xx.o(RESET)
 <LI><a href="#[20]">CAN1_SCE_IRQHandler</a> from startup_stm32f413_423xx.o(.text) referenced from startup_stm32f413_423xx.o(RESET)
 <LI><a href="#[1d]">CAN1_TX_IRQHandler</a> from startup_stm32f413_423xx.o(.text) referenced from startup_stm32f413_423xx.o(RESET)
 <LI><a href="#[4a]">CAN2_RX0_IRQHandler</a> from startup_stm32f413_423xx.o(.text) referenced from startup_stm32f413_423xx.o(RESET)
 <LI><a href="#[4b]">CAN2_RX1_IRQHandler</a> from startup_stm32f413_423xx.o(.text) referenced from startup_stm32f413_423xx.o(RESET)
 <LI><a href="#[4c]">CAN2_SCE_IRQHandler</a> from startup_stm32f413_423xx.o(.text) referenced from startup_stm32f413_423xx.o(RESET)
 <LI><a href="#[49]">CAN2_TX_IRQHandler</a> from startup_stm32f413_423xx.o(.text) referenced from startup_stm32f413_423xx.o(RESET)
 <LI><a href="#[55]">CAN3_RX0_IRQHandler</a> from startup_stm32f413_423xx.o(.text) referenced from startup_stm32f413_423xx.o(RESET)
 <LI><a href="#[56]">CAN3_RX1_IRQHandler</a> from startup_stm32f413_423xx.o(.text) referenced from startup_stm32f413_423xx.o(RESET)
 <LI><a href="#[57]">CAN3_SCE_IRQHandler</a> from startup_stm32f413_423xx.o(.text) referenced from startup_stm32f413_423xx.o(RESET)
 <LI><a href="#[54]">CAN3_TX_IRQHandler</a> from startup_stm32f413_423xx.o(.text) referenced from startup_stm32f413_423xx.o(RESET)
 <LI><a href="#[47]">DFSDM1_FLT0_IRQHandler</a> from startup_stm32f413_423xx.o(.text) referenced from startup_stm32f413_423xx.o(RESET)
 <LI><a href="#[48]">DFSDM1_FLT1_IRQHandler</a> from startup_stm32f413_423xx.o(.text) referenced from startup_stm32f413_423xx.o(RESET)
 <LI><a href="#[66]">DFSDM2_FLT0_IRQHandler</a> from startup_stm32f413_423xx.o(.text) referenced from startup_stm32f413_423xx.o(RESET)
 <LI><a href="#[67]">DFSDM2_FLT1_IRQHandler</a> from startup_stm32f413_423xx.o(.text) referenced from startup_stm32f413_423xx.o(RESET)
 <LI><a href="#[68]">DFSDM2_FLT2_IRQHandler</a> from startup_stm32f413_423xx.o(.text) referenced from startup_stm32f413_423xx.o(RESET)
 <LI><a href="#[69]">DFSDM2_FLT3_IRQHandler</a> from startup_stm32f413_423xx.o(.text) referenced from startup_stm32f413_423xx.o(RESET)
 <LI><a href="#[15]">DMA1_Stream0_IRQHandler</a> from startup_stm32f413_423xx.o(.text) referenced from startup_stm32f413_423xx.o(RESET)
 <LI><a href="#[16]">DMA1_Stream1_IRQHandler</a> from startup_stm32f413_423xx.o(.text) referenced from startup_stm32f413_423xx.o(RESET)
 <LI><a href="#[17]">DMA1_Stream2_IRQHandler</a> from startup_stm32f413_423xx.o(.text) referenced from startup_stm32f413_423xx.o(RESET)
 <LI><a href="#[18]">DMA1_Stream3_IRQHandler</a> from startup_stm32f413_423xx.o(.text) referenced from startup_stm32f413_423xx.o(RESET)
 <LI><a href="#[19]">DMA1_Stream4_IRQHandler</a> from startup_stm32f413_423xx.o(.text) referenced from startup_stm32f413_423xx.o(RESET)
 <LI><a href="#[1a]">DMA1_Stream5_IRQHandler</a> from startup_stm32f413_423xx.o(.text) referenced from startup_stm32f413_423xx.o(RESET)
 <LI><a href="#[1b]">DMA1_Stream6_IRQHandler</a> from startup_stm32f413_423xx.o(.text) referenced from startup_stm32f413_423xx.o(RESET)
 <LI><a href="#[39]">DMA1_Stream7_IRQHandler</a> from startup_stm32f413_423xx.o(.text) referenced from startup_stm32f413_423xx.o(RESET)
 <LI><a href="#[42]">DMA2_Stream0_IRQHandler</a> from startup_stm32f413_423xx.o(.text) referenced from startup_stm32f413_423xx.o(RESET)
 <LI><a href="#[43]">DMA2_Stream1_IRQHandler</a> from startup_stm32f413_423xx.o(.text) referenced from startup_stm32f413_423xx.o(RESET)
 <LI><a href="#[44]">DMA2_Stream2_IRQHandler</a> from startup_stm32f413_423xx.o(.text) referenced from startup_stm32f413_423xx.o(RESET)
 <LI><a href="#[45]">DMA2_Stream3_IRQHandler</a> from startup_stm32f413_423xx.o(.text) referenced from startup_stm32f413_423xx.o(RESET)
 <LI><a href="#[46]">DMA2_Stream4_IRQHandler</a> from startup_stm32f413_423xx.o(.text) referenced from startup_stm32f413_423xx.o(RESET)
 <LI><a href="#[4e]">DMA2_Stream5_IRQHandler</a> from startup_stm32f413_423xx.o(.text) referenced from startup_stm32f413_423xx.o(RESET)
 <LI><a href="#[4f]">DMA2_Stream6_IRQHandler</a> from startup_stm32f413_423xx.o(.text) referenced from startup_stm32f413_423xx.o(RESET)
 <LI><a href="#[50]">DMA2_Stream7_IRQHandler</a> from startup_stm32f413_423xx.o(.text) referenced from startup_stm32f413_423xx.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from stm32f4xx_it.o(i.DebugMon_Handler) referenced from startup_stm32f413_423xx.o(RESET)
 <LI><a href="#[10]">EXTI0_IRQHandler</a> from startup_stm32f413_423xx.o(.text) referenced from startup_stm32f413_423xx.o(RESET)
 <LI><a href="#[32]">EXTI15_10_IRQHandler</a> from startup_stm32f413_423xx.o(.text) referenced from startup_stm32f413_423xx.o(RESET)
 <LI><a href="#[11]">EXTI1_IRQHandler</a> from startup_stm32f413_423xx.o(.text) referenced from startup_stm32f413_423xx.o(RESET)
 <LI><a href="#[12]">EXTI2_IRQHandler</a> from startup_stm32f413_423xx.o(.text) referenced from startup_stm32f413_423xx.o(RESET)
 <LI><a href="#[13]">EXTI3_IRQHandler</a> from startup_stm32f413_423xx.o(.text) referenced from startup_stm32f413_423xx.o(RESET)
 <LI><a href="#[14]">EXTI4_IRQHandler</a> from startup_stm32f413_423xx.o(.text) referenced from startup_stm32f413_423xx.o(RESET)
 <LI><a href="#[21]">EXTI9_5_IRQHandler</a> from startup_stm32f413_423xx.o(.text) referenced from startup_stm32f413_423xx.o(RESET)
 <LI><a href="#[e]">FLASH_IRQHandler</a> from startup_stm32f413_423xx.o(.text) referenced from startup_stm32f413_423xx.o(RESET)
 <LI><a href="#[64]">FMPI2C1_ER_IRQHandler</a> from startup_stm32f413_423xx.o(.text) referenced from startup_stm32f413_423xx.o(RESET)
 <LI><a href="#[63]">FMPI2C1_EV_IRQHandler</a> from startup_stm32f413_423xx.o(.text) referenced from startup_stm32f413_423xx.o(RESET)
 <LI><a href="#[5a]">FPU_IRQHandler</a> from startup_stm32f413_423xx.o(.text) referenced from startup_stm32f413_423xx.o(RESET)
 <LI><a href="#[3a]">FSMC_IRQHandler</a> from startup_stm32f413_423xx.o(.text) referenced from startup_stm32f413_423xx.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from stm32f4xx_it.o(i.HardFault_Handler) referenced from startup_stm32f413_423xx.o(RESET)
 <LI><a href="#[2a]">I2C1_ER_IRQHandler</a> from startup_stm32f413_423xx.o(.text) referenced from startup_stm32f413_423xx.o(RESET)
 <LI><a href="#[29]">I2C1_EV_IRQHandler</a> from startup_stm32f413_423xx.o(.text) referenced from startup_stm32f413_423xx.o(RESET)
 <LI><a href="#[2c]">I2C2_ER_IRQHandler</a> from startup_stm32f413_423xx.o(.text) referenced from startup_stm32f413_423xx.o(RESET)
 <LI><a href="#[2b]">I2C2_EV_IRQHandler</a> from startup_stm32f413_423xx.o(.text) referenced from startup_stm32f413_423xx.o(RESET)
 <LI><a href="#[53]">I2C3_ER_IRQHandler</a> from startup_stm32f413_423xx.o(.text) referenced from startup_stm32f413_423xx.o(RESET)
 <LI><a href="#[52]">I2C3_EV_IRQHandler</a> from startup_stm32f413_423xx.o(.text) referenced from startup_stm32f413_423xx.o(RESET)
 <LI><a href="#[65]">LPTIM1_IRQHandler</a> from startup_stm32f413_423xx.o(.text) referenced from startup_stm32f413_423xx.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from stm32f4xx_it.o(i.MemManage_Handler) referenced from startup_stm32f413_423xx.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from stm32f4xx_it.o(i.NMI_Handler) referenced from startup_stm32f413_423xx.o(RESET)
 <LI><a href="#[4d]">OTG_FS_IRQHandler</a> from startup_stm32f413_423xx.o(.text) referenced from startup_stm32f413_423xx.o(RESET)
 <LI><a href="#[34]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f413_423xx.o(.text) referenced from startup_stm32f413_423xx.o(RESET)
 <LI><a href="#[b]">PVD_IRQHandler</a> from startup_stm32f413_423xx.o(.text) referenced from startup_stm32f413_423xx.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from port.o(.emb_text) referenced from startup_stm32f413_423xx.o(RESET)
 <LI><a href="#[62]">QUADSPI_IRQHandler</a> from startup_stm32f413_423xx.o(.text) referenced from startup_stm32f413_423xx.o(RESET)
 <LI><a href="#[f]">RCC_IRQHandler</a> from startup_stm32f413_423xx.o(.text) referenced from startup_stm32f413_423xx.o(RESET)
 <LI><a href="#[59]">RNG_IRQHandler</a> from startup_stm32f413_423xx.o(.text) referenced from startup_stm32f413_423xx.o(RESET)
 <LI><a href="#[33]">RTC_Alarm_IRQHandler</a> from startup_stm32f413_423xx.o(.text) referenced from startup_stm32f413_423xx.o(RESET)
 <LI><a href="#[d]">RTC_WKUP_IRQHandler</a> from startup_stm32f413_423xx.o(.text) referenced from startup_stm32f413_423xx.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32f413_423xx.o(.text) referenced from startup_stm32f413_423xx.o(RESET)
 <LI><a href="#[5f]">SAI1_IRQHandler</a> from startup_stm32f413_423xx.o(.text) referenced from startup_stm32f413_423xx.o(RESET)
 <LI><a href="#[3b]">SDIO_IRQHandler</a> from startup_stm32f413_423xx.o(.text) referenced from startup_stm32f413_423xx.o(RESET)
 <LI><a href="#[2d]">SPI1_IRQHandler</a> from startup_stm32f413_423xx.o(.text) referenced from startup_stm32f413_423xx.o(RESET)
 <LI><a href="#[2e]">SPI2_IRQHandler</a> from startup_stm32f413_423xx.o(.text) referenced from startup_stm32f413_423xx.o(RESET)
 <LI><a href="#[3d]">SPI3_IRQHandler</a> from startup_stm32f413_423xx.o(.text) referenced from startup_stm32f413_423xx.o(RESET)
 <LI><a href="#[5d]">SPI4_IRQHandler</a> from startup_stm32f413_423xx.o(.text) referenced from startup_stm32f413_423xx.o(RESET)
 <LI><a href="#[5e]">SPI5_IRQHandler</a> from startup_stm32f413_423xx.o(.text) referenced from startup_stm32f413_423xx.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from port.o(.emb_text) referenced from startup_stm32f413_423xx.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from port.o(i.SysTick_Handler) referenced from startup_stm32f413_423xx.o(RESET)
 <LI><a href="#[6b]">SystemInit</a> from system_stm32f4xx.o(i.SystemInit) referenced from startup_stm32f413_423xx.o(.text)
 <LI><a href="#[c]">TAMP_STAMP_IRQHandler</a> from startup_stm32f413_423xx.o(.text) referenced from startup_stm32f413_423xx.o(RESET)
 <LI><a href="#[22]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f413_423xx.o(.text) referenced from startup_stm32f413_423xx.o(RESET)
 <LI><a href="#[25]">TIM1_CC_IRQHandler</a> from startup_stm32f413_423xx.o(.text) referenced from startup_stm32f413_423xx.o(RESET)
 <LI><a href="#[24]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f413_423xx.o(.text) referenced from startup_stm32f413_423xx.o(RESET)
 <LI><a href="#[23]">TIM1_UP_TIM10_IRQHandler</a> from startup_stm32f413_423xx.o(.text) referenced from startup_stm32f413_423xx.o(RESET)
 <LI><a href="#[26]">TIM2_IRQHandler</a> from startup_stm32f413_423xx.o(.text) referenced from startup_stm32f413_423xx.o(RESET)
 <LI><a href="#[27]">TIM3_IRQHandler</a> from startup_stm32f413_423xx.o(.text) referenced from startup_stm32f413_423xx.o(RESET)
 <LI><a href="#[28]">TIM4_IRQHandler</a> from startup_stm32f413_423xx.o(.text) referenced from startup_stm32f413_423xx.o(RESET)
 <LI><a href="#[3c]">TIM5_IRQHandler</a> from startup_stm32f413_423xx.o(.text) referenced from startup_stm32f413_423xx.o(RESET)
 <LI><a href="#[40]">TIM6_DAC_IRQHandler</a> from startup_stm32f413_423xx.o(.text) referenced from startup_stm32f413_423xx.o(RESET)
 <LI><a href="#[41]">TIM7_IRQHandler</a> from startup_stm32f413_423xx.o(.text) referenced from startup_stm32f413_423xx.o(RESET)
 <LI><a href="#[35]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32f413_423xx.o(.text) referenced from startup_stm32f413_423xx.o(RESET)
 <LI><a href="#[38]">TIM8_CC_IRQHandler</a> from startup_stm32f413_423xx.o(.text) referenced from startup_stm32f413_423xx.o(RESET)
 <LI><a href="#[37]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32f413_423xx.o(.text) referenced from startup_stm32f413_423xx.o(RESET)
 <LI><a href="#[36]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32f413_423xx.o(.text) referenced from startup_stm32f413_423xx.o(RESET)
 <LI><a href="#[7c]">Task_db_delete1</a> from task_database.o(i.Task_db_delete1) referenced from task_init.o(i.task_INIT)
 <LI><a href="#[7f]">Task_db_delete2</a> from task_database.o(i.Task_db_delete2) referenced from task_init.o(i.task_INIT)
 <LI><a href="#[82]">Task_db_delete6</a> from task_database.o(i.Task_db_delete6) referenced from task_init.o(i.task_INIT)
 <LI><a href="#[7d]">Task_db_request1</a> from task_database.o(i.Task_db_request1) referenced from task_init.o(i.task_INIT)
 <LI><a href="#[80]">Task_db_request2</a> from task_database.o(i.Task_db_request2) referenced from task_init.o(i.task_INIT)
 <LI><a href="#[83]">Task_db_request6</a> from task_database.o(i.Task_db_request6) referenced from task_init.o(i.task_INIT)
 <LI><a href="#[7b]">Task_db_update1</a> from task_database.o(i.Task_db_update1) referenced from task_init.o(i.task_INIT)
 <LI><a href="#[7e]">Task_db_update2</a> from task_database.o(i.Task_db_update2) referenced from task_init.o(i.task_INIT)
 <LI><a href="#[81]">Task_db_update6</a> from task_database.o(i.Task_db_update6) referenced from task_init.o(i.task_INIT)
 <LI><a href="#[74]">Task_msg1</a> from task_msg.o(i.Task_msg1) referenced from task_init.o(i.task_INIT)
 <LI><a href="#[75]">Task_msg2</a> from task_msg.o(i.Task_msg2) referenced from task_init.o(i.task_INIT)
 <LI><a href="#[76]">Task_msg6</a> from task_msg.o(i.Task_msg6) referenced from task_init.o(i.task_INIT)
 <LI><a href="#[79]">Task_rec1_Hello</a> from task_hello.o(i.Task_rec1_Hello) referenced from task_init.o(i.task_INIT)
 <LI><a href="#[7a]">Task_rec6_Hello</a> from task_hello.o(i.Task_rec6_Hello) referenced from task_init.o(i.task_INIT)
 <LI><a href="#[77]">Task_send1_Hello</a> from task_hello.o(i.Task_send1_Hello) referenced from task_init.o(i.task_INIT)
 <LI><a href="#[78]">Task_send6_Hello</a> from task_hello.o(i.Task_send6_Hello) referenced from task_init.o(i.task_INIT)
 <LI><a href="#[6e]">Task_usart1_RX</a> from task_usart.o(i.Task_usart1_RX) referenced from task_init.o(i.task_INIT)
 <LI><a href="#[71]">Task_usart1_TX</a> from task_usart.o(i.Task_usart1_TX) referenced from task_init.o(i.task_INIT)
 <LI><a href="#[6f]">Task_usart2_RX</a> from task_usart.o(i.Task_usart2_RX) referenced from task_init.o(i.task_INIT)
 <LI><a href="#[72]">Task_usart2_TX</a> from task_usart.o(i.Task_usart2_TX) referenced from task_init.o(i.task_INIT)
 <LI><a href="#[70]">Task_usart6_RX</a> from task_usart.o(i.Task_usart6_RX) referenced from task_init.o(i.task_INIT)
 <LI><a href="#[73]">Task_usart6_TX</a> from task_usart.o(i.Task_usart6_TX) referenced from task_init.o(i.task_INIT)
 <LI><a href="#[61]">UART10_IRQHandler</a> from startup_stm32f413_423xx.o(.text) referenced from startup_stm32f413_423xx.o(RESET)
 <LI><a href="#[3e]">UART4_IRQHandler</a> from startup_stm32f413_423xx.o(.text) referenced from startup_stm32f413_423xx.o(RESET)
 <LI><a href="#[3f]">UART5_IRQHandler</a> from startup_stm32f413_423xx.o(.text) referenced from startup_stm32f413_423xx.o(RESET)
 <LI><a href="#[5b]">UART7_IRQHandler</a> from startup_stm32f413_423xx.o(.text) referenced from startup_stm32f413_423xx.o(RESET)
 <LI><a href="#[5c]">UART8_IRQHandler</a> from startup_stm32f413_423xx.o(.text) referenced from startup_stm32f413_423xx.o(RESET)
 <LI><a href="#[60]">UART9_IRQHandler</a> from startup_stm32f413_423xx.o(.text) referenced from startup_stm32f413_423xx.o(RESET)
 <LI><a href="#[2f]">USART1_IRQHandler</a> from usart.o(i.USART1_IRQHandler) referenced from startup_stm32f413_423xx.o(RESET)
 <LI><a href="#[30]">USART2_IRQHandler</a> from usart.o(i.USART2_IRQHandler) referenced from startup_stm32f413_423xx.o(RESET)
 <LI><a href="#[31]">USART3_IRQHandler</a> from startup_stm32f413_423xx.o(.text) referenced from startup_stm32f413_423xx.o(RESET)
 <LI><a href="#[51]">USART6_IRQHandler</a> from usart.o(i.USART6_IRQHandler) referenced from startup_stm32f413_423xx.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from stm32f4xx_it.o(i.UsageFault_Handler) referenced from startup_stm32f413_423xx.o(RESET)
 <LI><a href="#[a]">WWDG_IRQHandler</a> from startup_stm32f413_423xx.o(.text) referenced from startup_stm32f413_423xx.o(RESET)
 <LI><a href="#[6c]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f413_423xx.o(.text)
 <LI><a href="#[6a]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[84]">prvIdleTask</a> from tasks.o(i.prvIdleTask) referenced from tasks.o(i.vTaskStartScheduler)
 <LI><a href="#[6d]">prvTaskExitError</a> from port.o(i.prvTaskExitError) referenced from port.o(i.pxPortInitialiseStack)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[6c]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f413_423xx.o(.text)
</UL>
<P><STRONG><a name="[f7]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[85]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[90]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[f8]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[f9]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[fa]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[fb]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[fc]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f413_423xx.o(RESET)
</UL>
<P><STRONG><a name="[ea]"></a>__asm___6_port_c_39a90d8d__prvStartFirstTask</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[e9]"></a>__asm___6_port_c_39a90d8d__prvEnableVFP</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f413_423xx.o(RESET)
</UL>
<P><STRONG><a name="[fd]"></a>vPortGetIPSR</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, port.o(.emb_text), UNUSED)

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f413_423xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f413_423xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f413_423xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f413_423xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>AES_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f413_423xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f413_423xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f413_423xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f413_423xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f413_423xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f413_423xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f413_423xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f413_423xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f413_423xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f413_423xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f413_423xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f413_423xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f413_423xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f413_423xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f413_423xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f413_423xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f413_423xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f413_423xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>CAN3_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f413_423xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f413_423xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>CAN3_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f413_423xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f413_423xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>CAN3_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f413_423xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f413_423xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>CAN3_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f413_423xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f413_423xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>DFSDM1_FLT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f413_423xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f413_423xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>DFSDM1_FLT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f413_423xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f413_423xx.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>DFSDM2_FLT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f413_423xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f413_423xx.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>DFSDM2_FLT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f413_423xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f413_423xx.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>DFSDM2_FLT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f413_423xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f413_423xx.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>DFSDM2_FLT3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f413_423xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f413_423xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f413_423xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f413_423xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f413_423xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f413_423xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f413_423xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f413_423xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f413_423xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f413_423xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f413_423xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f413_423xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f413_423xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f413_423xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f413_423xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f413_423xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f413_423xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f413_423xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f413_423xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f413_423xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f413_423xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f413_423xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f413_423xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f413_423xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f413_423xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f413_423xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f413_423xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f413_423xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f413_423xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f413_423xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f413_423xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f413_423xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f413_423xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f413_423xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f413_423xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f413_423xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f413_423xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f413_423xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f413_423xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f413_423xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f413_423xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f413_423xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f413_423xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f413_423xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f413_423xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f413_423xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f413_423xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f413_423xx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f413_423xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f413_423xx.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>FMPI2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f413_423xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f413_423xx.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>FMPI2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f413_423xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f413_423xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f413_423xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f413_423xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>FSMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f413_423xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f413_423xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f413_423xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f413_423xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f413_423xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f413_423xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f413_423xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f413_423xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f413_423xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f413_423xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f413_423xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f413_423xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f413_423xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f413_423xx.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>LPTIM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f413_423xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f413_423xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f413_423xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f413_423xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f413_423xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f413_423xx.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f413_423xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f413_423xx.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>QUADSPI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f413_423xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f413_423xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f413_423xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f413_423xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f413_423xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f413_423xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f413_423xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f413_423xx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f413_423xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f413_423xx.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>SAI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f413_423xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f413_423xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f413_423xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f413_423xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f413_423xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f413_423xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f413_423xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f413_423xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f413_423xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f413_423xx.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>SPI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f413_423xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f413_423xx.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>SPI5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f413_423xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f413_423xx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f413_423xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f413_423xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f413_423xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f413_423xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f413_423xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f413_423xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f413_423xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f413_423xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f413_423xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f413_423xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f413_423xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f413_423xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f413_423xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f413_423xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f413_423xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f413_423xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f413_423xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f413_423xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f413_423xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f413_423xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f413_423xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f413_423xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f413_423xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f413_423xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f413_423xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f413_423xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f413_423xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f413_423xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f413_423xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f413_423xx.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>UART10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f413_423xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f413_423xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f413_423xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f413_423xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f413_423xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f413_423xx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>UART7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f413_423xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f413_423xx.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>UART8_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f413_423xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f413_423xx.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>UART9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f413_423xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f413_423xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f413_423xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f413_423xx.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f413_423xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f413_423xx.o(RESET)
</UL>
<P><STRONG><a name="[ce]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvWriteBytesToBuffer
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvReadBytesFromBuffer
</UL>

<P><STRONG><a name="[a4]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insertEntry
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deleteEntriesForInterface
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_usart2_RX
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_msg2
</UL>

<P><STRONG><a name="[fe]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[89]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[ff]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[100]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[88]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[d2]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewStreamBuffer
</UL>

<P><STRONG><a name="[101]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[8a]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[a2]"></a>strcat</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, strcat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_usart2_RX
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_msg6
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_msg2
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_msg1
</UL>

<P><STRONG><a name="[a9]"></a>strstr</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, strstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_usart2_RX
</UL>

<P><STRONG><a name="[a1]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insertEntry
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_usart2_RX
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_msg6
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_msg2
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_msg1
</UL>

<P><STRONG><a name="[ab]"></a>strncat</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, strncat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncat
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_usart2_RX
</UL>

<P><STRONG><a name="[a0]"></a>strtok</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, strtok.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = strtok
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_usart2_RX
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_msg6
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_msg2
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_msg1
</UL>

<P><STRONG><a name="[8b]"></a>atoi</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, atoi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_msg6
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_msg2
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_msg1
</UL>

<P><STRONG><a name="[8d]"></a>strtol</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, strtol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[86]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[102]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[8e]"></a>__rt_ctype_table</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ctype_o.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[8f]"></a>_strtoul</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[91]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.BusFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f413_423xx.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f413_423xx.o(RESET)
</UL>
<P><STRONG><a name="[b6]"></a>Delay</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hardware.o(i.Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_hardware
</UL>

<P><STRONG><a name="[b9]"></a>GPIO_Init</STRONG> (Thumb, 120 bytes, Stack size 20 bytes, stm32f4xx_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_hardware
</UL>

<P><STRONG><a name="[ba]"></a>GPIO_PinAFConfig</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f4xx_gpio.o(i.GPIO_PinAFConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_PinAFConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_hardware
</UL>

<P><STRONG><a name="[b8]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(i.GPIO_SetBits))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_hardware
</UL>

<P><STRONG><a name="[aa]"></a>GPIO_ToggleBits</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(i.GPIO_ToggleBits))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_usart2_RX
</UL>

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f413_423xx.o(RESET)
</UL>
<P><STRONG><a name="[a3]"></a>ID_to_string</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, main.o(i.ID_to_string))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_usart2_RX
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_msg6
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_msg2
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_msg1
</UL>

<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.MemManage_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f413_423xx.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f413_423xx.o(RESET)
</UL>
<P><STRONG><a name="[bd]"></a>NVIC_Init</STRONG> (Thumb, 96 bytes, Stack size 12 bytes, misc.o(i.NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_hardware
</UL>

<P><STRONG><a name="[b5]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, misc.o(i.NVIC_PriorityGroupConfig))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_hardware
</UL>

<P><STRONG><a name="[b7]"></a>RCC_AHB1PeriphClockCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_AHB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_hardware
</UL>

<P><STRONG><a name="[bf]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_APB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_hardware
</UL>

<P><STRONG><a name="[bb]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_APB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_hardware
</UL>

<P><STRONG><a name="[af]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, stm32f4xx_rcc.o(i.RCC_GetClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_hardware
</UL>

<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, port.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SysTick_Handler &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f413_423xx.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>SystemInit</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, system_stm32f4xx.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SystemInit &rArr; SetSysClock
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f413_423xx.o(.text)
</UL>
<P><STRONG><a name="[7c]"></a>Task_db_delete1</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, task_database.o(i.Task_db_delete1))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = Task_db_delete1 &rArr; deleteEntriesForInterface &rArr; send &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_interface
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deleteEntriesForInterface
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task_init.o(i.task_INIT)
</UL>
<P><STRONG><a name="[7f]"></a>Task_db_delete2</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, task_database.o(i.Task_db_delete2))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = Task_db_delete2 &rArr; deleteEntriesForInterface &rArr; send &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_interface
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deleteEntriesForInterface
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task_init.o(i.task_INIT)
</UL>
<P><STRONG><a name="[82]"></a>Task_db_delete6</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, task_database.o(i.Task_db_delete6))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = Task_db_delete6 &rArr; deleteEntriesForInterface &rArr; send &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_interface
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deleteEntriesForInterface
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task_init.o(i.task_INIT)
</UL>
<P><STRONG><a name="[7d]"></a>Task_db_request1</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, task_database.o(i.Task_db_request1))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = Task_db_request1 &rArr; send_intMetric &rArr; send &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_intMetric
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task_init.o(i.task_INIT)
</UL>
<P><STRONG><a name="[80]"></a>Task_db_request2</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, task_database.o(i.Task_db_request2))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = Task_db_request2 &rArr; send_intMetric &rArr; send &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_intMetric
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task_init.o(i.task_INIT)
</UL>
<P><STRONG><a name="[83]"></a>Task_db_request6</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, task_database.o(i.Task_db_request6))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = Task_db_request6 &rArr; send_intMetric &rArr; send &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_intMetric
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task_init.o(i.task_INIT)
</UL>
<P><STRONG><a name="[7b]"></a>Task_db_update1</STRONG> (Thumb, 240 bytes, Stack size 24 bytes, task_database.o(i.Task_db_update1))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = Task_db_update1 &rArr; insertEntry &rArr; send &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insertEntry
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_intMetric
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferReceive
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_pc
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task_init.o(i.task_INIT)
</UL>
<P><STRONG><a name="[7e]"></a>Task_db_update2</STRONG> (Thumb, 202 bytes, Stack size 16 bytes, task_database.o(i.Task_db_update2))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = Task_db_update2 &rArr; insertEntry &rArr; send &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insertEntry
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_intMetric
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferReceive
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_pc
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task_init.o(i.task_INIT)
</UL>
<P><STRONG><a name="[81]"></a>Task_db_update6</STRONG> (Thumb, 232 bytes, Stack size 24 bytes, task_database.o(i.Task_db_update6))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = Task_db_update6 &rArr; insertEntry &rArr; send &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insertEntry
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_intMetric
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferReceive
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_pc
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task_init.o(i.task_INIT)
</UL>
<P><STRONG><a name="[74]"></a>Task_msg1</STRONG> (Thumb, 290 bytes, Stack size 304 bytes, task_msg.o(i.Task_msg1))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = Task_msg1 &rArr; find_pc &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferReceive
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_pc
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ID_to_string
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task_init.o(i.task_INIT)
</UL>
<P><STRONG><a name="[75]"></a>Task_msg2</STRONG> (Thumb, 302 bytes, Stack size 336 bytes, task_msg.o(i.Task_msg2))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = Task_msg2 &rArr; find_pc &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferReceive
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_pc
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ID_to_string
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task_init.o(i.task_INIT)
</UL>
<P><STRONG><a name="[76]"></a>Task_msg6</STRONG> (Thumb, 298 bytes, Stack size 312 bytes, task_msg.o(i.Task_msg6))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = Task_msg6 &rArr; find_pc &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferReceive
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_pc
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ID_to_string
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task_init.o(i.task_INIT)
</UL>
<P><STRONG><a name="[79]"></a>Task_rec1_Hello</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, task_hello.o(i.Task_rec1_Hello))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = Task_rec1_Hello &rArr; send &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task_init.o(i.task_INIT)
</UL>
<P><STRONG><a name="[7a]"></a>Task_rec6_Hello</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, task_hello.o(i.Task_rec6_Hello))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = Task_rec6_Hello &rArr; send &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task_init.o(i.task_INIT)
</UL>
<P><STRONG><a name="[77]"></a>Task_send1_Hello</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, task_hello.o(i.Task_send1_Hello))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = Task_send1_Hello &rArr; find_interface &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_interface
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_hop
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task_init.o(i.task_INIT)
</UL>
<P><STRONG><a name="[78]"></a>Task_send6_Hello</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, task_hello.o(i.Task_send6_Hello))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = Task_send6_Hello &rArr; find_interface &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_interface
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_hop
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task_init.o(i.task_INIT)
</UL>
<P><STRONG><a name="[6e]"></a>Task_usart1_RX</STRONG> (Thumb, 182 bytes, Stack size 256 bytes, task_usart.o(i.Task_usart1_RX))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = Task_usart1_RX &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferSend
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task_init.o(i.task_INIT)
</UL>
<P><STRONG><a name="[71]"></a>Task_usart1_TX</STRONG> (Thumb, 130 bytes, Stack size 256 bytes, task_usart.o(i.Task_usart1_TX))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = Task_usart1_TX &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferReceive
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task_init.o(i.task_INIT)
</UL>
<P><STRONG><a name="[6f]"></a>Task_usart2_RX</STRONG> (Thumb, 2098 bytes, Stack size 624 bytes, task_usart.o(i.Task_usart2_RX))
<BR><BR>[Stack]<UL><LI>Max Depth = 800<LI>Call Chain = Task_usart2_RX &rArr; banner_message &rArr; send &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_pc
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_hop
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ToggleBits
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferSend
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;banner_message
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ID_to_string
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncat
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task_init.o(i.task_INIT)
</UL>
<P><STRONG><a name="[72]"></a>Task_usart2_TX</STRONG> (Thumb, 120 bytes, Stack size 256 bytes, task_usart.o(i.Task_usart2_TX))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = Task_usart2_TX &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferReceive
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task_init.o(i.task_INIT)
</UL>
<P><STRONG><a name="[70]"></a>Task_usart6_RX</STRONG> (Thumb, 186 bytes, Stack size 256 bytes, task_usart.o(i.Task_usart6_RX))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = Task_usart6_RX &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferSend
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task_init.o(i.task_INIT)
</UL>
<P><STRONG><a name="[73]"></a>Task_usart6_TX</STRONG> (Thumb, 130 bytes, Stack size 256 bytes, task_usart.o(i.Task_usart6_TX))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = Task_usart6_TX &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferReceive
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task_init.o(i.task_INIT)
</UL>
<P><STRONG><a name="[2f]"></a>USART1_IRQHandler</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, usart.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = USART1_IRQHandler &rArr; xQueueGiveFromISR &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f413_423xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USART2_IRQHandler</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, usart.o(i.USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = USART2_IRQHandler &rArr; xQueueGiveFromISR &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f413_423xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>USART6_IRQHandler</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, usart.o(i.USART6_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = USART6_IRQHandler &rArr; xQueueGiveFromISR &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f413_423xx.o(RESET)
</UL>
<P><STRONG><a name="[ac]"></a>USART_ClearITPendingBit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART6_IRQHandler
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[be]"></a>USART_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_hardware
</UL>

<P><STRONG><a name="[92]"></a>USART_GetFlagStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_usart6_TX
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_usart2_TX
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_usart2_RX
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_usart1_TX
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>

<P><STRONG><a name="[bc]"></a>USART_ITConfig</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32f4xx_usart.o(i.USART_ITConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_hardware
</UL>

<P><STRONG><a name="[ae]"></a>USART_Init</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, stm32f4xx_usart.o(i.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_hardware
</UL>

<P><STRONG><a name="[a6]"></a>USART_ReceiveData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_usart6_RX
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_usart2_RX
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_usart1_RX
</UL>

<P><STRONG><a name="[93]"></a>USART_SendData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_usart6_TX
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_usart2_TX
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_usart2_RX
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_usart1_TX
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>

<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.UsageFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f413_423xx.o(RESET)
</UL>
<P><STRONG><a name="[8c]"></a>__aeabi_errno_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[103]"></a>__rt_errno_addr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr), UNUSED)

<P><STRONG><a name="[104]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[105]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[106]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[a8]"></a>banner_message</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, main.o(i.banner_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = banner_message &rArr; send &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_usart2_RX
</UL>

<P><STRONG><a name="[98]"></a>deleteEntriesForInterface</STRONG> (Thumb, 170 bytes, Stack size 56 bytes, database_list.o(i.deleteEntriesForInterface))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = deleteEntriesForInterface &rArr; send &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_db_delete6
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_db_delete2
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_db_delete1
</UL>

<P><STRONG><a name="[a5]"></a>find_hop</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, database_list.o(i.find_hop))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = find_hop &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_usart2_RX
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_send6_Hello
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_send1_Hello
</UL>

<P><STRONG><a name="[97]"></a>find_interface</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, database_list.o(i.find_interface))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = find_interface &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_send6_Hello
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_send1_Hello
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_db_delete6
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_db_delete2
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_db_delete1
</UL>

<P><STRONG><a name="[9e]"></a>find_pc</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, database_list.o(i.find_pc))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = find_pc &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_usart2_RX
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_msg6
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_msg2
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_msg1
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_db_update6
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_db_update2
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_db_update1
</UL>

<P><STRONG><a name="[b1]"></a>init_database</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, database_list.o(i.init_database))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = init_database &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b3]"></a>init_hardware</STRONG> (Thumb, 682 bytes, Stack size 72 bytes, hardware.o(i.init_hardware))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = init_hardware &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9f]"></a>insertEntry</STRONG> (Thumb, 272 bytes, Stack size 88 bytes, database_list.o(i.insertEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = insertEntry &rArr; send &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_db_update6
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_db_update2
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_db_update1
</UL>

<P><STRONG><a name="[6a]"></a>main</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = main &rArr; sema_INIT &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_INIT
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sema_INIT
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_INIT
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_hardware
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_database
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[c1]"></a>msg_INIT</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, sema_msg.o(i.msg_INIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = msg_INIT &rArr; xStreamBufferGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferGenericCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b2]"></a>pvPortMalloc</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, heap_1.o(i.pvPortMalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insertEntry
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferGenericCreate
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_database
</UL>

<P><STRONG><a name="[ee]"></a>pvTaskIncrementMutexHeldCount</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, tasks.o(i.pvTaskIncrementMutexHeldCount))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[d5]"></a>pxPortInitialiseStack</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, port.o(i.pxPortInitialiseStack))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pxPortInitialiseStack
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[c0]"></a>sema_INIT</STRONG> (Thumb, 430 bytes, Stack size 8 bytes, sema_msg.o(i.sema_INIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = sema_INIT &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[99]"></a>send</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, main.o(i.send))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = send &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferSend
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insertEntry
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deleteEntriesForInterface
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_intMetric
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_usart2_RX
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_send6_Hello
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_send1_Hello
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_rec6_Hello
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_rec1_Hello
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_msg6
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_msg2
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_msg1
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_db_update6
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_db_update2
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_db_update1
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_db_request2
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_db_delete6
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_db_delete2
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_db_delete1
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;banner_message
</UL>

<P><STRONG><a name="[9a]"></a>send_intMetric</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, task_database.o(i.send_intMetric))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = send_intMetric &rArr; send &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_db_update6
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_db_update2
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_db_update1
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_db_request6
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_db_request2
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_db_request1
</UL>

<P><STRONG><a name="[c2]"></a>task_INIT</STRONG> (Thumb, 370 bytes, Stack size 24 bytes, task_init.o(i.task_INIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = task_INIT &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c6]"></a>uxListRemove</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, list.o(i.uxListRemove))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityInherit
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityDisinheritAfterTimeout
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>

<P><STRONG><a name="[cb]"></a>vListInitialise</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, list.o(i.vListInitialise))
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>

<P><STRONG><a name="[d4]"></a>vListInitialiseItem</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, list.o(i.vListInitialiseItem))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[c8]"></a>vListInsert</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, list.o(i.vListInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>

<P><STRONG><a name="[c7]"></a>vListInsertEnd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, list.o(i.vListInsertEnd))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityInherit
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityDisinheritAfterTimeout
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>

<P><STRONG><a name="[ca]"></a>vPortEnterCritical</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, port.o(i.vPortEnterCritical))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferReceive
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferSend
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskNotifyWait
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskNotifyStateClear
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>

<P><STRONG><a name="[cc]"></a>vPortExitCritical</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, port.o(i.vPortExitCritical))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferReceive
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferSend
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskNotifyWait
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskNotifyStateClear
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>

<P><STRONG><a name="[b0]"></a>vPortFree</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heap_1.o(i.vPortFree))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deleteEntriesForInterface
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
</UL>

<P><STRONG><a name="[e8]"></a>vPortSetupTimerInterrupt</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, port.o(i.vPortSetupTimerInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[9b]"></a>vTaskDelay</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, tasks.o(i.vTaskDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_usart6_TX
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_usart2_RX
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_usart1_TX
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_send6_Hello
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_send1_Hello
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_db_update1
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_db_request6
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_db_request2
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_db_request1
</UL>

<P><STRONG><a name="[ec]"></a>vTaskInternalSetTimeOutState</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tasks.o(i.vTaskInternalSetTimeOutState))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
</UL>

<P><STRONG><a name="[dc]"></a>vTaskMissedYield</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tasks.o(i.vTaskMissedYield))
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[e4]"></a>vTaskPlaceOnEventList</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, tasks.o(i.vTaskPlaceOnEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[e5]"></a>vTaskPriorityDisinheritAfterTimeout</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, tasks.o(i.vTaskPriorityDisinheritAfterTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vTaskPriorityDisinheritAfterTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[e6]"></a>vTaskSetTimeOutState</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, tasks.o(i.vTaskSetTimeOutState))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vTaskSetTimeOutState
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferSend
</UL>

<P><STRONG><a name="[c3]"></a>vTaskStartScheduler</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, tasks.o(i.vTaskStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = vTaskStartScheduler &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[df]"></a>vTaskSuspendAll</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tasks.o(i.vTaskSuspendAll))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferReceive
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferSend
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[87]"></a>vTaskSwitchContext</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, tasks.o(i.vTaskSwitchContext))
<BR><BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[e7]"></a>xPortStartScheduler</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, port.o(i.xPortStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = xPortStartScheduler
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSetupTimerInterrupt
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_port_c_39a90d8d__prvEnableVFP
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_port_c_39a90d8d__prvStartFirstTask
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[e1]"></a>xQueueCreateMutex</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, queue.o(i.xQueueCreateMutex))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sema_INIT
</UL>

<P><STRONG><a name="[e2]"></a>xQueueGenericCreate</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, queue.o(i.xQueueGenericCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sema_INIT
</UL>

<P><STRONG><a name="[eb]"></a>xQueueGenericReset</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, queue.o(i.xQueueGenericReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>

<P><STRONG><a name="[9d]"></a>xQueueGenericSend</STRONG> (Thumb, 276 bytes, Stack size 64 bytes, queue.o(i.xQueueGenericSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvNotifyQueueSetContainer
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insertEntry
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_interface
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deleteEntriesForInterface
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_pc
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_hop
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_usart6_TX
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_usart6_RX
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_usart2_TX
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_usart2_RX
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_usart1_TX
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_usart1_RX
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_send6_Hello
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_send1_Hello
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_db_update6
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_db_update1
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sema_INIT
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
</UL>

<P><STRONG><a name="[ad]"></a>xQueueGiveFromISR</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, queue.o(i.xQueueGiveFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = xQueueGiveFromISR &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvNotifyQueueSetContainer
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART6_IRQHandler
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[96]"></a>xQueueSemaphoreTake</STRONG> (Thumb, 290 bytes, Stack size 48 bytes, queue.o(i.xQueueSemaphoreTake))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = xQueueSemaphoreTake &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityInherit
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityDisinheritAfterTimeout
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvTaskIncrementMutexHeldCount
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insertEntry
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_interface
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deleteEntriesForInterface
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_pc
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_hop
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_usart6_TX
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_usart6_RX
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_usart2_TX
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_usart2_RX
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_usart1_TX
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_usart1_RX
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_send6_Hello
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_send1_Hello
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_rec6_Hello
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_rec1_Hello
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_msg6
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_msg2
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_msg1
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_db_update6
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_db_update2
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_db_update1
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_db_request6
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_db_request2
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_db_request1
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_db_delete6
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_db_delete2
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_db_delete1
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
</UL>

<P><STRONG><a name="[c4]"></a>xStreamBufferGenericCreate</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, stream_buffer.o(i.xStreamBufferGenericCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = xStreamBufferGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewStreamBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_INIT
</UL>

<P><STRONG><a name="[9c]"></a>xStreamBufferReceive</STRONG> (Thumb, 152 bytes, Stack size 40 bytes, stream_buffer.o(i.xStreamBufferReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = xStreamBufferReceive &rArr; xTaskNotifyWait &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskNotifyWait
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskNotifyStateClear
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvReadMessageFromBuffer
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvBytesInBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_usart6_TX
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_usart2_TX
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_usart1_TX
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_msg6
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_msg2
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_msg1
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_db_update6
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_db_update2
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_db_update1
</UL>

<P><STRONG><a name="[a7]"></a>xStreamBufferSend</STRONG> (Thumb, 172 bytes, Stack size 56 bytes, stream_buffer.o(i.xStreamBufferSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = xStreamBufferSend &rArr; xTaskNotifyWait &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskNotifyWait
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskNotifyStateClear
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferSpacesAvailable
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvWriteMessageToBuffer
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvBytesInBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_usart6_RX
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_usart2_RX
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_usart1_RX
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
</UL>

<P><STRONG><a name="[f5]"></a>xStreamBufferSpacesAvailable</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stream_buffer.o(i.xStreamBufferSpacesAvailable))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferSend
</UL>

<P><STRONG><a name="[ed]"></a>xTaskCheckForTimeOut</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, tasks.o(i.xTaskCheckForTimeOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskCheckForTimeOut
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferSend
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[e3]"></a>xTaskCreate</STRONG> (Thumb, 86 bytes, Stack size 56 bytes, tasks.o(i.xTaskCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_INIT
</UL>

<P><STRONG><a name="[f4]"></a>xTaskGenericNotify</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, tasks.o(i.xTaskGenericNotify))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskGenericNotify
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferReceive
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferSend
</UL>

<P><STRONG><a name="[f2]"></a>xTaskGetCurrentTaskHandle</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetCurrentTaskHandle))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferReceive
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferSend
</UL>

<P><STRONG><a name="[94]"></a>xTaskIncrementTick</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, tasks.o(i.xTaskIncrementTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[f1]"></a>xTaskNotifyStateClear</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, tasks.o(i.xTaskNotifyStateClear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = xTaskNotifyStateClear
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferReceive
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferSend
</UL>

<P><STRONG><a name="[f3]"></a>xTaskNotifyWait</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, tasks.o(i.xTaskNotifyWait))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = xTaskNotifyWait &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferReceive
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferSend
</UL>

<P><STRONG><a name="[cf]"></a>xTaskPriorityDisinherit</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, tasks.o(i.xTaskPriorityDisinherit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>

<P><STRONG><a name="[ef]"></a>xTaskPriorityInherit</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, tasks.o(i.xTaskPriorityInherit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskPriorityInherit
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[d8]"></a>xTaskRemoveFromEventList</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, tasks.o(i.xTaskRemoveFromEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvNotifyQueueSetContainer
</UL>

<P><STRONG><a name="[e0]"></a>xTaskResumeAll</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, tasks.o(i.xTaskResumeAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferReceive
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferSend
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[95]"></a>SetSysClock</STRONG> (Thumb, 158 bytes, Stack size 12 bytes, system_stm32f4xx.o(i.SetSysClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClock
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[b4]"></a>__NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, hardware.o(i.__NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_hardware
</UL>

<P><STRONG><a name="[c5]"></a>prvAddCurrentTaskToDelayedList</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, tasks.o(i.prvAddCurrentTaskToDelayedList))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskNotifyWait
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
</UL>

<P><STRONG><a name="[c9]"></a>prvAddNewTaskToReadyList</STRONG> (Thumb, 194 bytes, Stack size 24 bytes, tasks.o(i.prvAddNewTaskToReadyList))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = prvAddNewTaskToReadyList
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[d0]"></a>prvDeleteTCB</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, tasks.o(i.prvDeleteTCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvDeleteTCB
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[84]"></a>prvIdleTask</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, tasks.o(i.prvIdleTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvIdleTask &rArr; prvDeleteTCB
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasks.o(i.vTaskStartScheduler)
</UL>
<P><STRONG><a name="[d3]"></a>prvInitialiseNewTask</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, tasks.o(i.prvInitialiseNewTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prvInitialiseNewTask &rArr; pxPortInitialiseStack
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pxPortInitialiseStack
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[f6]"></a>prvResetNextTaskUnblockTime</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, tasks.o(i.prvResetNextTaskUnblockTime))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>

<P><STRONG><a name="[6d]"></a>prvTaskExitError</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, port.o(i.prvTaskExitError))
<BR>[Address Reference Count : 1]<UL><LI> port.o(i.pxPortInitialiseStack)
</UL>
<P><STRONG><a name="[cd]"></a>prvCopyDataToQueue</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, queue.o(i.prvCopyDataToQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvNotifyQueueSetContainer
</UL>

<P><STRONG><a name="[d6]"></a>prvIsQueueEmpty</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, queue.o(i.prvIsQueueEmpty))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvIsQueueEmpty
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[d7]"></a>prvNotifyQueueSetContainer</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, queue.o(i.prvNotifyQueueSetContainer))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[db]"></a>prvUnlockQueue</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, queue.o(i.prvUnlockQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvNotifyQueueSetContainer
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskMissedYield
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[f0]"></a>prvBytesInBuffer</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stream_buffer.o(i.prvBytesInBuffer))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferReceive
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferSend
</UL>

<P><STRONG><a name="[d1]"></a>prvInitialiseNewStreamBuffer</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, stream_buffer.o(i.prvInitialiseNewStreamBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = prvInitialiseNewStreamBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferGenericCreate
</UL>

<P><STRONG><a name="[d9]"></a>prvReadBytesFromBuffer</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, stream_buffer.o(i.prvReadBytesFromBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = prvReadBytesFromBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvReadMessageFromBuffer
</UL>

<P><STRONG><a name="[da]"></a>prvReadMessageFromBuffer</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, stream_buffer.o(i.prvReadMessageFromBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = prvReadMessageFromBuffer &rArr; prvReadBytesFromBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvReadBytesFromBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferReceive
</UL>

<P><STRONG><a name="[dd]"></a>prvWriteBytesToBuffer</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, stream_buffer.o(i.prvWriteBytesToBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = prvWriteBytesToBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvWriteMessageToBuffer
</UL>

<P><STRONG><a name="[de]"></a>prvWriteMessageToBuffer</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, stream_buffer.o(i.prvWriteMessageToBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = prvWriteMessageToBuffer &rArr; prvWriteBytesToBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvWriteBytesToBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferSend
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
